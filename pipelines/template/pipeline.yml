# ---------- Template: pipelines/template/pipeline.yml ----------
parameters:
  - name: PythonVersion
    type: string
    values: ['3.9','3.10','3.11','3.12','3.13']
    default: '3.11'

stages:
# ---------------- LINT ----------------
- stage: LinterStage
  displayName: "Lint"
  jobs:
  - job: UsePython
    displayName: "Use Python"
    pool: { vmImage: ubuntu-latest }
    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python ${{ parameters.PythonVersion }}"
        inputs:
          versionSpec: ${{ parameters.PythonVersion }}

  - job: RunLinters
    displayName: "Run Linters"
    dependsOn: UsePython
    pool: { vmImage: ubuntu-latest }
    steps:
      - script: python -m pip install --upgrade pip
        displayName: "Upgrade pip"
      - script: python -m pip install flake8 mypy
        displayName: "Install flake8 & mypy"
      - bash: |
          echo "Running mypy..."
          python -m mypy . ; true
        displayName: "mypy (non-blocking)"
      - bash: |
          echo "Running flake8..."
          python -m flake8 . ; true
        displayName: "flake8 (non-blocking)"

# ---------------- UNIT TESTS ----------------
- stage: UnitTestingStage
  displayName: "Unit Tests"
  dependsOn: LinterStage
  jobs:
  - job: InstallPython
    displayName: "Use Python"
    pool: { vmImage: ubuntu-latest }
    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python ${{ parameters.PythonVersion }}"
        inputs:
          versionSpec: ${{ parameters.PythonVersion }}

  - job: InstallDependencies
    displayName: "Install Dependencies"
    dependsOn: InstallPython
    pool: { vmImage: ubuntu-latest }
    steps:
      - bash: |
          set -eux
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f ecommerce/requirements.txt ]; then
            pip install -r ecommerce/requirements.txt
          fi
          pip install pytest pytest-django
        displayName: "Install Python Dependencies"

  - job: RunUnitTests
    displayName: "Run Unit Tests"
    dependsOn: InstallDependencies
    pool: { vmImage: ubuntu-latest }
    steps:
      - bash: |
          set -eux
          export PYTHONPATH="$(pwd)/ecommerce:${PYTHONPATH}"
          echo "PYTHONPATH=$PYTHONPATH"

          mkdir -p test-results
          pytest -q --maxfail=1 --disable-warnings --junitxml=test-results/pytest.xml
        displayName: "Execute pytest"

      - task: PublishTestResults@2
        displayName: "Publish pytest results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "test-results/pytest.xml"
          failTaskOnFailedTests: true

# ---------------- APPROVAL ----------------
- stage: DeploymentApprovalStage
  displayName: "Approval"
  dependsOn: UnitTestingStage
  pool: server
  jobs:
  - job: DeploymentApprovalJob
    displayName: "Manual Approval"
    steps:
      - task: ManualValidation@1
        inputs:
          instructions: "Please approve the deployment."
          timeoutInMinutes: 5

# ---------------- DEPLOY----------------
- stage: DeploymentStage
  displayName: "Deploy"
  dependsOn: DeploymentApprovalStage
  jobs:
  - job: InstallPython
    displayName: "Use Python"
    pool: { vmImage: ubuntu-latest }
    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python ${{ parameters.PythonVersion }}"
        inputs:
          versionSpec: ${{ parameters.PythonVersion }}

  - job: InstallDependencies
    displayName: "Install Dependencies"
    dependsOn: InstallPython
    pool: { vmImage: ubuntu-latest }
    steps:
      - bash: |
          set -eux
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f ecommerce/requirements.txt ]; then
            pip install -r ecommerce/requirements.txt
          fi
        displayName: "Install Python Dependencies"

  - job: RunDeployment
    displayName: "Run Deployment"
    dependsOn: InstallDependencies
    pool: { vmImage: ubuntu-latest }
    steps:
      - bash: |
          echo "Running Deployment..."
        displayName: "Deploy (placeholder)"